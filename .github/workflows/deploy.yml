name: Deploy to Google Cloud Run

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: revenue-agent
  REGION: us-central1
  REGISTRY: gcr.io

jobs:
  deploy:
    name: Build and Deploy to Cloud Run
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
      
      - name: Configure Docker to use gcloud as credential helper
        run: |
          gcloud auth configure-docker
      
      - name: Build Docker image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} ./rev_agent
          docker tag ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest
      
      - name: Push Docker image to GCR
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest
      
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image=${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
            --platform=managed \
            --region=${{ env.REGION }} \
            --allow-unauthenticated \
            --update-env-vars="OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" \
            --update-env-vars="SUPABASE_URL=${{ secrets.SUPABASE_URL }}" \
            --update-env-vars="SUPABASE_SERVICE_KEY=${{ secrets.SUPABASE_SERVICE_KEY }}" \
            --update-env-vars="LANGCHAIN_TRACING_V2=${{ secrets.LANGCHAIN_TRACING_V2 || 'false' }}" \
            --update-env-vars="LANGCHAIN_ENDPOINT=${{ secrets.LANGCHAIN_ENDPOINT || 'https://api.smith.langchain.com' }}" \
            --update-env-vars="LANGCHAIN_API_KEY=${{ secrets.LANGCHAIN_API_KEY }}" \
            --update-env-vars="LANGCHAIN_PROJECT=${{ secrets.LANGCHAIN_PROJECT || 'revenue-planning-agent' }}" \
            --update-env-vars="TAVILY_API_KEY=${{ secrets.TAVILY_API_KEY }}" \
            --memory=2Gi \
            --cpu=2 \
            --timeout=300 \
            --max-instances=10 \
            --min-instances=0 \
            --concurrency=80
      
      - name: Get Service URL
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format='value(status.url)')
          echo "Service deployed at: $SERVICE_URL"
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV
      
      - name: Verify Deployment
        run: |
          echo "Testing health endpoint..."
          sleep 10
          curl -f ${{ env.SERVICE_URL }}/health || echo "Health check failed"
          echo "Testing root endpoint..."
          curl -f ${{ env.SERVICE_URL }}/ || echo "Root endpoint failed"
